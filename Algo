IF ELIF ELSE

//return string length

def strlen(word):
    c = 0
    for i in word:
        c+=1
    return c

print(strlen("hello world"))

//Palindrome
def strrev(a):
    return(a[::-1])
def ispalin(b):
    c = strrev(b)
    if(c == b):
        print("Yes Palindrome")
    else:
        print("Not a Palindrome")
p="Man"
ispalin(p)

//validate IP address
def IP4 (i):
    n = i.split('.')
    print (n)
    for i in n:
        if (int(i [0])) == 0:
            return False
        if (len(i) > 3):
            return False
        if not i.isdigit():
            return False 
        x = int (i)
        if x < 0 or x > 255:
            return False
    else:
        return True
p='234.01.1.1'
print(IP4(p))

//Read from text file and print

myfile = open("fruits.txt")
content = myfile.read()
myfile.close()
content = content.splitlines()
for i in content:
     print(len(i))
     
//Jump list by n numbers
def jump(list):
    i=0
    c=0
    l=len(list)-1
    while i<l:
        if list[i]==0:
            return -1
        else:
            i = i+list[i]
            c+=1
    return c

a=[0,4,1,2,3,1,1,1,1,1,1]
print(jump(a))

//return sum of digits
def digit_sum(number):
    number = str(number)
    s=0
    for n in number:
        s=s+int(n)
    return s
a=123
print(digit_sum(a))

//remove matching numbers from sorted array

def rem(n):
    l=len(n)-2
    for i in range(0, l):
        if n[i]==n[i+1]:
            n.pop(i)
            l=l-1
            print(n,l,i)
            i+=1
        i+=1
    return n

n=[1,2,2,3]
print(rem(n))

//number palindrome
def palin(n):
    n=str(n)
    l=len(n)-1
    for i in range(0,round(len(n)/2)):
        if n[i]!=n[l]:
            return "Not"
        i+=1
        l-=1
    return "Yes"

n=123454321
print(palin(n))

// return length of array after removing duplicates

def rem(n):
    l=len(n)-2
    for i in range(0, l):
        while n[i]==n[i+1]:
            n.pop(i)
            l=l-1
        if i==l:
            return len(n)
        else:
            i+=1
    return len(n)

n=[0,0,1,1,1,2,2,3,3,4]
print(rem(n))

//VERY IMP LIST SLICING

n=[2,1,5,6,3,7]
s=0
for x,y in zip(n[:-1],n[1:]):
    if(x<y):
        a=y-x
        s+=a
        print(s)
       
 //List rotate by k
 
 def rot(n,k):
    l=len(n)
    a=n[l-k:]
    while(k!=0):
        n.pop(-1)
        k-=1       
    for x in n:
        a.append(x)
    print(a)

n=[-1,-100,3,99]
k=2
rot(n,k)
        
//move 0 to the end of array

def s(nums):
    for i in nums:
        if i==0:
            nums.remove(i)
            nums.append(i)
            print(nums)


nums = [0,1,0,3,12]
s(nums)


//if sum of two matches given target

def s(nums,t):
    for i in nums[:]:
        for j in nums[1:]:
            if(nums.index(i)!=nums.index(j)):
                if i+j==t:
                    return(i,j)
                       
            else:
                continue
            continue
        return 1

nums = [2, 7, 11, 15]
t=14
print(s(nums,t))

//return max of an array
def maxf(a):
    b=a[0]
    for i in a:
        if i>b:
            b=i
        else :
            continue
    return b

a=[1,3,5,-1]
print(maxf(a))

//return sum of consecutive elements
def maxf(a):
    b=[]
    for i,j in zip(a[:len(a)-1],a[1:len(a)]):
                   b.append(i+j)
    return b
        

a=[1,3,5,-1]
print(maxf(a))

//check if sum of consecutive numbers exists in a list
def maxf(a):
    for i,j in zip(a[:len(a)-1],a[1:len(a)]):
                   if (i+j in a):
                        return True
                   else:
                        continue
    return False       
a=[1,3,5,-1,4]
print(maxf(a))

//linked list

class Node(object):

    def __init__(self, value):
        self.value = value
        self.next  = None
    def pri(a):
        print(a.value,a.next.value)
n1=Node(1)
n2=Node(2)
n3=Node(3)
n1.next=n2
n2.next=n3
Node.pri(n1)
//linked list cycle detect
class Node(object):
    def __init__(self,n):
        self.value=n
        self.next=None
    def cycle(fn):
        v=[]
        while(fn.next is not None):
            print(v,fn.value)
            if fn in v:
                return True
            else:
                v.append(fn.value)
                fn=fn.next
        return False
n1=Node(1)
n2=Node(2)
n3=Node(3)
n4=Node(4)
n1.next=n2
n2.next=n3
n3.next=n4

print(Node.cycle(n1))

// return nth fibonacci given n

def fib(n):
    i=0
    j=1
    while n>1:
        s=i+j
        i=j
        j=s
        n-=1
    return j

print(fib(9))
    
//dictionary rotation

l=["sat","tat","uat","at","bat"]
for x,y in zip(l[:-1],l[1:]):
    if x[0]>y[0]:
        print (l.index(y))
        
 //return product of all integers except that index
 def pro(a):
    b=[]
    for x in a[:]:
        p=1
        for y in a[:]:
            if a.index(x)==a.index(y):
                continue
            else:
                p*=y
        b.append(p)
    return(b)   

a=[1, 7, 3, 0]
print(pro(a))
//optimized for O(n) time and memory complexity
def pro(a):
    p=1
    f=[None]*len(a)
    for i in range(len(a)):
        f[i]=p
        p*=a[i]
    print (f) 
    p=1
    for i in range(len(a)-1,-1,-1): 
        print (i)
        f[i]*=p
        p*=a[i]
    return(f)   

a=[1, 7, 3, 6]
print(pro(a))
//if orders were processing first in first out
def check(a,b,c):
    while len(c)>0:
        print(len(c))
        if len(a)>0 and c[0]==a[0]:
            c.pop(0)
            a.pop(0)
            print(c,a)  
        elif c[0]==b[0]:
            c.pop(0)
            b.pop(0)
            print(c,b)
        else:
                print("Queue not followed")
                return False
    return True           
                

a=[1, 7, 3, 6,0]
b=[2,4,9]
c=[2,4,9,1, 7, 3, 6,0]
print(check(a,b,c))
